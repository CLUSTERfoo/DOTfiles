" ------------------------------------------------------------------------------
" Display
" ------------------------------------------------------------------------------

  syntax on

  set number
  set scrolloff=10        " display at least 10 lines of context around cursor
  set list
  set showmatch
  set showmode
  set ruler
  set hlsearch
  set nowrap                " wrap if text is too long to display
  set colorcolumn=80      " Make sure lines don't go over 80 columns
  " set background=dark
  colorscheme +summerfruit
  " resize current window to 85 lines
  let &winwidth = 85

  " Display <tab>s, etc.
  set nolist
  "set listchars=tab:>-,trail:.,nbsp:_,eol:$



" ------------------------------------------------------------------------------
" Syntax 
" ------------------------------------------------------------------------------

  " Default Indentation
  set expandtab           " Turn tabs to spaces
  set shiftwidth=2        " Make indentation 4 spaces
  set softtabstop=2
  set tabstop=2
  " use :retab to reformat all existing tabs in a file

  " By Filetype
  if has ("autocmd")
    " Indentation
    autocmd Filetype make setlocal shiftwidth=8 softtabstop=8 tabstop=8 noexpandtab
    autocmd Filetype python setlocal shiftwidth=4 softtabstop=4 tabstop=4 expandtab
    autocmd Filetype javascript setlocal shiftwidth=4 softtabstop=4 tabstop=4 expandtab
    autocmd Filetype markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 expandtab
    autocmd Filetype c setlocal shiftwidth=4 softtabstop=4 tabstop=4 expandtab
    autocmd Filetype xml setlocal shiftwidth=4 softtabstop=4 tabstop=4 expandtab
    " Syntax
    autocmd BufNewFile,BufRead *.erb,*.html,*.rss,*.atom setfiletype xml
  endif



" ------------------------------------------------------------------------------
" Editing Functionality
" ------------------------------------------------------------------------------

  set autoindent
  " Real men don't use mouse
  set mouse=a
  " set paste and nopaste modes
  inoremap <C-P>y <Esc>:set paste<Cr>i
  nnoremap <C-P>y <Esc>:set paste<Cr>i 
  inoremap <C-P>n <Esc>:set nopaste<Cr>
  nnoremap <C-P>n <Esc>:set nopaste<Cr>





" ------------------------------------------------------------------------------
" Key Maps
" ------------------------------------------------------------------------------

  " Esc while ssh'ing from iPad
  " inoremap qq <Esc>
  
  " Change windows from insert mode
  inoremap <C-W>W <Esc><C-W><C-W>

  " Easy window change
  nnoremap <C-H> <C-W><left>
  nnoremap <C-J> <C-W><down>
  nnoremap <C-K> <C-W><up>
  nnoremap <C-L> <C-W><right> 
  nnoremap tt <Esc>:tabnew<Cr>
  nnoremap J <Esc>gT
  nnoremap K <Esc>gt
  " Easy split
  nnoremap <leader>v <Esc>:vsplit<Cr>
  nnoremap <leader>s <Esc>:split<Cr>

  " Move right (to jump out of brackets or quotes)
  inoremap <C-@> <Right>
  inoremap <C-Space> <Right>

  " EOL
  inoremap <C-l> <Esc>$a

  " search files. :cw to view list of matches.
  nnoremap <C-F>a <Esc>:vimgrep<Space>
  nnoremap <C-F>r <Esc>:%s//gc<Left><Left><Left>



" ------------------------------------------------------------------------------
" Opening and cloising braces, etc.
" ------------------------------------------------------------------------------

  " Opening and closing braces
  inoremap {} {<Space><Space>}<Esc>hi
  inoremap }{ {<CR>}<Esc>O<Tab>
  inoremap }} <Esc>$a<Space>{<CR>}<Esc>O<Tab>
  inoremap () ()<Esc>i
  inoremap )( (<Space><Space>)<Esc>hi
  inoremap [] []<Esc>i
  inoremap <bar><bar> <bar><bar><Esc>i
  inoremap " ""<Esc>i
  inoremap '' ''<Esc>i
  inoremap <> <lt>><Esc>i
  inoremap ;; <Esc>$a;
  " ruby do ... end
  inoremap <C-E> <Esc>$a<Space>do<CR>end<Esc>O<Tab>
  " ruby erb opening and closing <%= >
  inoremap ><lt> <lt>%=<Space><Space>%><Esc>hhi



" ------------------------------------------------------------------------------
" Multipurpose Tab Key lifted from  Gary Bernhardt's vimrc:
"
" Tab key inserts tab if at beginning of line. Else do autocomplete.
" (Use CTRL-I if tabs are necessary within text)
" ------------------------------------------------------------------------------

  function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
      return "\<tab>"
    else
      return "\<c-p>"
    endif
  endfunction
  inoremap <Tab> <c-r>=InsertTabWrapper()<CR>



" ------------------------------------------------------------------------------
" Misc
" ------------------------------------------------------------------------------

  set warn 
  set viewdir=$HOME/.vimviews/
  set autoprint
  set report=1
  set history=100



" ------------------------------------------------------------------------------
" Plugins Stuff
" ------------------------------------------------------------------------------

  " Powerline
  set nocompatible        " NOTE: vundle also needs this
  set t_Co=256            " Tell Vim that terminal supports 256 colors
  set laststatus=2        " Always show the statusline
  set encoding=utf-8      " Necessary to show unicode gylphs

  " Call NERDtree
  noremap <C-N> <Esc>:NERDTreeToggle<CR>
  inoremap <C-N> <Esc>:NERDTreeToggle<CR>

  " Filetype plugin for NERDCommenter
  filetype plugin on

  " CtrlP
  nnoremap <C-F>f <Esc>:CtrlP<Cr>

  " Indent guides
  let g:indent_guides_enable_on_vim_startup = 1
  
" Vundle
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
"filetype plugin indent on
filetype plugin on

Bundle 'gmarik/vundle'
Bundle 'scrooloose/nerdtree'
Bundle 'Lokaltog/vim-powerline'
Bundle 'kien/ctrlp.vim'
Bundle 'vim-scripts/ScrollColors'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'https://github.com/tpope/vim-surround.git'



